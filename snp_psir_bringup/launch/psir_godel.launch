<?xml version="1.0"?>
<launch>
  <!-- arguments -->
  <arg name="sim_robot" default="false"/>
  <arg name="robot_name" default="prbt" />
  <arg name="robot_model_plugin" default="descartes_moveit/IkFastMoveitStateAdapter"/>
  <arg name="debug_core" default="false"/> <!--Brings up the surface blending service in debug mode-->
  <arg name="save_data" default="false" />
  <arg name="save_location" default="$(env HOME)/.ros/" />

  <!-- Configure descartes model -->
  <param name="ikfast_base_frame" value="$(arg robot_name)_base_link"/>
  <param name="ikfast_tool_frame" value="$(arg robot_name)_tool0"/>

  <!-- Launches the blend/scan process planners: requires descartes plugin for the robot model -->
  <include file="$(find godel_process_planning)/launch/process_planning.launch">
    <arg name="robot_model_plugin" value="$(arg robot_model_plugin)"/>
    <arg name="keyence_tcp" value="ensenso_optical_frame"/>
  </include>

  <!-- Process execution nodes: These monitor the state of robot's execution of the planned path. They can be, and in this case are, robot or vendor specific -->
  <group>
    <node name="blend_process_execution" pkg="snp_psir_support" type="psir_blend_process_service_node">
      <remap from="simulate_path" to="simulation/simulate_trajectory"/>
      <remap from="joint_trajectory_action" to="/$(arg robot_name)/manipulator_joint_trajectory_controller/follow_joint_trajectory"/>
      <param name="spindle_host" value="127.0.0.1" if="$(arg sim_robot)"/>
      <param name="spindle_port" value="1502" if="$(arg sim_robot)"/>
    </node>
  </group>

  <!-- Bring up simulated robot that can be visualized under the tf namespace 'simulation'
       Allows for previewing paths generated before execution. -->
  <include file="$(find industrial_robot_simulator_service)/launch/start_simulation_server.launch"/>

  <!-- Brings up the core blending service: this includes the tool path planners
       for both the blender and the laser scanner. -->
  <include file="$(find godel_surface_detection)/launch/godel_core.launch">
    <arg name="config_path" value="$(find snp_psir_bringup)/config"/>
    <arg name="debug" value="$(arg debug_core)"/>
    <arg name="save_data" value="$(arg save_data)" />
    <arg name="save_location" value="$(arg save_location)" />
  </include>

  <!-- Crop workspace out of the pointcloud -->
  <node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager" output="screen" />
  <node pkg="nodelet" type="nodelet" name="crop_workspace" args="load pcl/CropBox pcl_manager" output="screen">
    <remap from="~input" to="/point_cloud" />
    <remap from="~output" to="/point_cloud_workspace" />
    <rosparam>
      min_x: -0.2
      max_x: 0.2
      min_y: -0.6
      max_y: -0.2
      min_z: 0.10
      max_z: 0.25
      input_frame: world_frame
    </rosparam>
  </node>

  <rosparam command="load" file="$(find meshing_plugins)/config/meshing.yaml" />
  <rosparam command="load" file="$(find path_planning_plugins)/config/path_planning.yaml" />
  <rosparam command="load" file="$(find godel_process_planning)/config/process_planning.yaml" />

</launch>
